version: '3.8' 
# The above version wil lock the version of docker-compose to be used.

services:
  mongodb:
    image: "mongo"   # It can be the path to the image (repository) or a custom images build by us.

    volumes:
      # - data:/data/db:ro    # OR
      - data:/data/db

    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: vishu   
    #   MONGO_INITDB_ROOT_PASSWORD: secret     # OR
    #   # - MONGO_INITDB_ROOT_USERNAME=vishu
    #   # - MONGO_INITDB_ROOT_PASSWORD=secret

    # container_name: mongodb         # This will replace the autogenerated name with this one.

    env_file:
      - ./env/mongo.env     # We are doing it bcoz if we made a separate env file and do ot want to share t but want to still use it (in our case in env folder -> `mongo.env`) .
    
    # networks:
    #   - goals-net     # No need we will use default..(automatically created by docker-compose).

  back:
    build: ./backend    # OR
    
    # build:                # Use this method if name of Dockerfile is different or Dockerfile is located somwhere else.
    #   context: ./backend
    #   dockerfile: Dockerfile
    #   args:               # If our Dockerfile contains `ARG`.
    #     some-arg:

    ports:
      - "80:8080"
    
    volumes:
      - logs:/app/logs
      - ./backend:/app    # Bindmount
      - /app/node_modules

    # container_name: backend
    
    env_file:
      - ./env/backend.env 
    
    depends_on:
      - mongodb
    

  front:
    build: ./frontend

    ports:
      - "3000:3000"
    
    volumes:
      - ./frontend/src:/app/src

    stdin_open: true      # -i  # These two lines are to run it in interactive mode.
    tty: true             # -t  ---> `-it`.

    depends_on:
      - back

# Servics has three containers `mongodb`... *Note*: ` - ` is used if there is single value and ` - ` is not used if there is key value pairs.

# Note: Docker compose will automatically create a new environment automatically for all the services thus no need to add network in the services Although \
# We can add ` networks: `  key...


# For Named volumes: They must be specified here.

volumes:
  data:
  logs: